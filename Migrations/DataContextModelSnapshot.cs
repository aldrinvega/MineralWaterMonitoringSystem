// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MineralWaterMonitoring.Data;

#nullable disable

namespace MineralWaterMonitoring.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("collection_id");

                    b.Property<int>("CollectionAmount")
                        .HasColumnType("int")
                        .HasColumnName("collection_amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<string>("Status")
                        .HasColumnType("longtext")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_collections");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_collections_group_id");

                    b.ToTable("collections", (string)null);
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Contributions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("contribution_id");

                    b.Property<Guid>("CollectionId")
                        .HasColumnType("char(36)")
                        .HasColumnName("collection_id");

                    b.Property<int>("ContributionAmount")
                        .HasColumnType("int")
                        .HasColumnName("contribution_amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<Guid>("PayerId")
                        .HasColumnType("char(36)")
                        .HasColumnName("payer_id");

                    b.HasKey("Id")
                        .HasName("pk_contributions");

                    b.HasIndex("CollectionId")
                        .HasDatabaseName("ix_contributions_collection_id");

                    b.HasIndex("PayerId")
                        .HasDatabaseName("ix_contributions_payer_id");

                    b.ToTable("contributions", (string)null);
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Groups", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_added");

                    b.Property<string>("GroupCode")
                        .HasColumnType("longtext")
                        .HasColumnName("group_code");

                    b.Property<string>("GroupName")
                        .HasColumnType("longtext")
                        .HasColumnName("group_name");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Payers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("payer_id");

                    b.Property<int>("Balance")
                        .HasColumnType("int")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Fullname")
                        .HasColumnType("longtext")
                        .HasColumnName("fullname");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("char(36)")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_payers");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_payers_group_id");

                    b.ToTable("payers", (string)null);
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)")
                        .HasColumnName("user_id");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext")
                        .HasColumnName("full_name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<string>("UserName")
                        .HasColumnType("longtext")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Collection", b =>
                {
                    b.HasOne("MineralWaterMonitoring.Domain.Groups", "Groups")
                        .WithMany("Collection")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_collections_groups_group_id");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Contributions", b =>
                {
                    b.HasOne("MineralWaterMonitoring.Domain.Collection", "Collection")
                        .WithMany()
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contributions_collections_collection_id");

                    b.HasOne("MineralWaterMonitoring.Domain.Payers", "Payer")
                        .WithMany("Contributions")
                        .HasForeignKey("PayerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_contributions_payers_payer_id");

                    b.Navigation("Collection");

                    b.Navigation("Payer");
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Payers", b =>
                {
                    b.HasOne("MineralWaterMonitoring.Domain.Groups", "Groups")
                        .WithMany("Payers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_payers_groups_group_id");

                    b.Navigation("Groups");
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Groups", b =>
                {
                    b.Navigation("Collection");

                    b.Navigation("Payers");
                });

            modelBuilder.Entity("MineralWaterMonitoring.Domain.Payers", b =>
                {
                    b.Navigation("Contributions");
                });
#pragma warning restore 612, 618
        }
    }
}
